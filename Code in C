#include <stdio.h>

#define MAX_ROWS 15

// Prototypes
void PrintIntroduction(char []);
void AskForInput(double *, double *, double *);
void CalculateXValues(double, double, double, double [], int *);
void CalculateYValues(double [], double [], int);
void OutputResults(double [], double [], int);

// Main function
int main(void) {
    // Print introduction
    PrintIntroduction("The program will calculate x and y values in the function y=(x^3+2x-14)/7x based on entered variables.\n");
    double xValues[MAX_ROWS];
    double yValues[MAX_ROWS];
    double A, B, H;  
    int count = 0;   // Initialize count to 0

    // Input
    AskForInput(&A, &B, &H);  
    
    // Calculate x values 
    CalculateXValues(A, B, H, xValues, &count);
    
    // Calculate y values based on x values
    CalculateYValues(xValues, yValues, count);
    
    // Output results
    OutputResults(xValues, yValues, count);
    
    return 0;    
}

// Function to print introduction
void PrintIntroduction(char message[]) {
    printf("%s", message);
}

// Function to ask for user input
void AskForInput(double *A, double *B, double *H) {
    int validInput;
    do {
        validInput = 1; // Assume input is valid unless proven otherwise
        
        printf("Enter the start value A (cannot be 0): ");
        scanf("%lf", A);
        if (*A == 0) {
            printf("A cannot be 0. Please try again.\n");
            validInput = 0; // Mark input as invalid
        }

        if (validInput) { // Only ask for B if A is valid
            printf("Enter the end value B (B > A): ");
            scanf("%lf", B);
            if (*B <= *A) {
                printf("B cannot be < A. Please try again.\n");
                validInput = 0; // Mark input as invalid
            }
        }

        if (validInput) { // Only ask for H if B is valid
            printf("Enter the step size H (cannot be 0): ");
            scanf("%lf", H);
            if (*H == 0) {
                printf("Step cannot be 0. Please try again.\n");
                validInput = 0; // Mark input as invalid
            }
        }

    } while (!validInput); // Continue until valid input is received
}

// Function to calculate x values
void CalculateXValues(double A, double B, double H, double xValues[], int *count) {
    int i = 0;
    for (double x = A; x <= B && i < MAX_ROWS; x += H) {
        xValues[i++] = x;
    }
    *count = i; // Store the number of valid x values
}

// Function to calculate y values based on x values
void CalculateYValues(double xValues[], double yValues[], int count) {
    for (int i = 0; i < count; i++) {
        if (xValues[i] != 0) { // Avoid division by zero
            yValues[i] = (xValues[i] * xValues[i] * xValues[i] + 2 * xValues[i] - 14) / (7 * xValues[i]);
        } else {
            yValues[i] = 0; // Handle the case where x is 0
        }
    }
}

// Function to output results
void OutputResults(double xValues[], double yValues[], int count) {
    printf("\nResults:\n");
    printf(" x\t\t y\n");
    printf("---------------------\n");
    for (int i = 0; i < count; i++) {
        printf("%.2f\t\t %.2f\n", xValues[i], yValues[i]);
    }
}
